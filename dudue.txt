use anchor_lang::prelude::*;

declare_id!("37TZxBi4zgnVEE1uvU2RFPzEwK1dWPfifjbhPgCj4g7K");

#[program]
pub mod crash_game {
    use super::*;

    pub fn initialize(ctx: Context<Initialize>) -> Result<()> {
        ctx.accounts.config.admin = ctx.accounts.admin.key();
        Ok(())
    }

    pub fn change_admin(ctx: Context<ChangeAdmin>, new_admin: Pubkey) -> Result<()> {
        require_keys_eq!(ctx.accounts.config.admin, ctx.accounts.admin.key(), ErrorCode::Unauthorized);
        ctx.accounts.config.admin = new_admin;
        Ok(())
    }

    pub fn deposit(ctx: Context<Deposit>, amount: u64) -> Result<()> {
        let transfer_cpi = anchor_lang::system_program::Transfer {
            from: ctx.accounts.user.to_account_info(),
            to: ctx.accounts.vault.to_account_info(),
        };
        let cpi_program = ctx.accounts.system_program.to_account_info();
        anchor_lang::system_program::transfer(
            CpiContext::new(cpi_program, transfer_cpi),
            amount,
        )?;

        let user_balance = &mut ctx.accounts.user_balance;
        if user_balance.user == Pubkey::default() {
            user_balance.user = ctx.accounts.user.key();
        }
        user_balance.balance = user_balance.balance.checked_add(amount).ok_or(ErrorCode::Overflow)?;
        Ok(())
    }

    pub fn withdraw(ctx: Context<Withdraw>, amount: u64) -> Result<()> {
        let user_balance = &mut ctx.accounts.user_balance;
        require!(user_balance.balance >= amount, ErrorCode::InsufficientBalance);

        let transfer_cpi = anchor_lang::system_program::Transfer {
            from: ctx.accounts.vault.to_account_info(),
            to: ctx.accounts.user.to_account_info(),
        };
        let cpi_program = ctx.accounts.system_program.to_account_info();
        anchor_lang::system_program::transfer(
            CpiContext::new(cpi_program, transfer_cpi),
            amount,
        )?;

        user_balance.balance = user_balance.balance.checked_sub(amount).ok_or(ErrorCode::Underflow)?;
        Ok(())
    }

    pub fn admin_place_bet(ctx: Context<AdminAction>, amount: u64) -> Result<()> {
        require_keys_eq!(ctx.accounts.config.admin, ctx.accounts.admin.key(), ErrorCode::Unauthorized);
        require_keys_eq!(ctx.accounts.user_balance.user, ctx.accounts.user.key(), ErrorCode::InvalidUser);

        let user_balance = &mut ctx.accounts.user_balance;
        require!(user_balance.balance >= amount, ErrorCode::InsufficientBalance);
        user_balance.balance = user_balance.balance.checked_sub(amount).ok_or(ErrorCode::Underflow)?;
        // Here, the bet is placed by admin on behalf of the user. The amount is deducted from the user's virtual balance.
        // In a real crash game, you might track active bets in a separate account.
        Ok(())
    }

    pub fn admin_resolve_bet(ctx: Context<AdminAction>, payout: u64) -> Result<()> {
        require_keys_eq!(ctx.accounts.config.admin, ctx.accounts.admin.key(), ErrorCode::Unauthorized);
        require_keys_eq!(ctx.accounts.user_balance.user, ctx.accounts.user.key(), ErrorCode::InvalidUser);

        let user_balance = &mut ctx.accounts.user_balance;
        user_balance.balance = user_balance.balance.checked_add(payout).ok_or(ErrorCode::Overflow)?;
        // Here, the admin resolves the bet, adding the payout (e.g., bet * multiplier) to the user's balance if they won.
        // If lost, payout = 0. The vault holds the funds, so payouts come from the house's share in the vault.
        Ok(())
    }
}

#[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(init, payer = admin, space = 8 + 32, seeds = [b"config"], bump)]
    pub config: Account<'info, Config>,
    #[account(init, payer = admin, space = 8, seeds = [b"vault"], bump)]
    pub vault: Account<'info, Vault>,
    #[account(mut)]
    pub admin: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct ChangeAdmin<'info> {
    #[account(mut, seeds = [b"config"], bump)]
    pub config: Account<'info, Config>,
    #[account(mut)]
    pub admin: Signer<'info>,
}

#[derive(Accounts)]
pub struct Deposit<'info> {
    #[account(mut)]
    pub user: Signer<'info>,
    #[account(mut, seeds = [b"vault"], bump)]
    pub vault: Account<'info, Vault>,
    #[account(
        init_if_needed,
        payer = user,
        space = 8 + 32 + 8,
        seeds = [user.key().as_ref(), b"balance"],
        bump
    )]
    pub user_balance: Account<'info, UserBalance>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct Withdraw<'info> {
    #[account(mut)]
    pub user: Signer<'info>,
    #[account(mut, seeds = [b"vault"], bump)]
    pub vault: Account<'info, Vault>,
    #[account(mut, seeds = [user.key().as_ref(), b"balance"], bump)]
    pub user_balance: Account<'info, UserBalance>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct AdminAction<'info> {
    #[account(seeds = [b"config"], bump)]
    pub config: Account<'info, Config>,
    #[account(mut)]
    pub admin: Signer<'info>,
    pub user: UncheckedAccount<'info>,
    #[account(mut, seeds = [user.key().as_ref(), b"balance"], bump)]
    pub user_balance: Account<'info, UserBalance>,
}

#[account]
pub struct Config {
    pub admin: Pubkey,
}

#[account]
pub struct Vault {}

#[account]
pub struct UserBalance {
    pub user: Pubkey,
    pub balance: u64,
}

#[error_code]
pub enum ErrorCode {
    #[msg("Insufficient balance")]
    InsufficientBalance,
    #[msg("Arithmetic overflow")]
    Overflow,
    #[msg("Arithmetic underflow")]
    Underflow,
    #[msg("Unauthorized access")]
    Unauthorized,
    #[msg("Invalid user account")]
    InvalidUser,
}
